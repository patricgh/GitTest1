function displayDulyMakingChecklistTab(executionContext) {
    debugger;
    var formContext = executionContext.getFormContext();
    if (formContext.ui.getFormType() == 2 && formContext.getAttribute('defra_regimeid').getValue() != null) {
        var regimeName = formContext.getAttribute('defra_regimeid').getValue()[0].name;
        var tabObj = formContext.ui.tabs.get("tab_12")
        for (i = 0; i < tabObj.sections.getAll().length; i++)
            tabObj.sections.getAll()[i].setVisible(false);

        switch (regimeName) {
            case "MCP":
                var sectionObj = tabObj.sections.get("tab_12_section_2");
                sectionObj.setVisible(true);
                break;
            case "Waste":
                var sectionObj = tabObj.sections.get("tab_12_section_4");
                sectionObj.setVisible(true);
                break;

        }
    }
}

function RaiseRFISCH5(primaryControl, type) {
    var formContext = primaryControl;
    debugger;
    var status = formContext.getAttribute("statuscode").getValue();
    if (type == 1 && status != 910400002 && status != 910400009) {
        alert('Creating a SCH5 is not available at this stage.');
        return;
    }
    if (status == 910400022 || status == 910400015 || status == 910400001 || status == 910400002 || status == 910400009) {
        var entityFormOptions = {};
        entityFormOptions["entityName"] = "defra_rfisch5";
        entityFormOptions["openInNewWindow"] = true;
        entityFormOptions["windowPosition"] = 1;
        var typeText = "";
        if (type == 0)
            typeText = "RFI for application ";
        else if (type == 1)
            typeText = "SCH5 for application ";
        var formParameters = {};
        formParameters["defra_title"] = typeText + formContext.getAttribute("defra_applicationnumber").getValue();
        formParameters["defra_applicationid"] = formContext.data.entity.getId();
        formParameters["defra_applicationidname"] = formContext.getAttribute("defra_applicationnumber").getValue();
        formParameters["defra_applicationidtype"] = "defra_application";
        formParameters["defra_channel"] = 0;
        formParameters["defra_type"] = type;

        switch (status) {
            case 910400022:   //Admin
                formParameters["defra_stage"] = 910400000;
                break;
            case 910400015:     //Intel
                formParameters["defra_stage"] = 910400001;
                break;
            case 910400001:     //Duly making
                formParameters["defra_stage"] = 910400002;
                break;
            case 910400002:     //Determination
                formParameters["defra_stage"] = 910400003;
                break;
            case 910400009:     //On-hold Pending SCH5
                formParameters["defra_stage"] = 910400003;
                break;
        }

        // Open the form.
        Xrm.Navigation.openForm(entityFormOptions, formParameters).then(
            function (success) {
                console.log(success);
            },
            function (error) {
                console.log(error);
            });
    }
    else {
        alert('Creating a RFI is not available at this stage.');
    }
}

function setTabFocus(executionContext) {
    debugger;
    try {
        var formContext = executionContext.getFormContext();
        if (formContext.getAttribute('defra_intel_checks_required').getValue() != null && formContext.getAttribute('defra_intel_checks_required').getValue())
            formContext.ui.tabs.get('tab_intelchecks').setVisible(true);
        else
            formContext.ui.tabs.get('tab_intelchecks').setVisible(false);
        if (formContext.ui.getFormType() == 2) {
            var status = formContext.getAttribute('statuscode').getValue();
            switch (status) {
                case 910400022:
                    formContext.ui.tabs.get('tab_applicationchecks').setFocus();
                    break;
                case 910400015:
                    formContext.ui.tabs.get('tab_intelchecks').setFocus();
                    break;
                case 910400021:
                case 910400001:
                    formContext.ui.tabs.get('tab_dulymaking').setFocus();
                    break;
                case 910400002:
                case 910400014:
                case 910400005:
                case 910400030:
                case 910400017:
                case 910400018:
                    formContext.ui.tabs.get('tab_determination').setFocus();
                    break;
                default:
                    formContext.ui.tabs.get('tab_general').setFocus();
            }
        }        
    }
    catch (error) {
        alert('Error occurred in form load script method: setTabFocus().');
        //alert(error.messa);
    }
}

// form render script for regime specific data
function onloadAppForm(executionContext) {
    debugger;
    try {
        var formContext = executionContext.getFormContext();
        var globalContext = Xrm.Utility.getGlobalContext();
        var clientURL = globalContext.getClientUrl();
        var formName = formContext.ui.formSelector.getCurrentItem().getLabel();
        if (formContext.getAttribute('defra_regimeid').getValue() != null && formContext.getAttribute('defra_businesstrackid').getValue() != null) {
            var regimeName = formContext.getAttribute('defra_regimeid').getValue()[0].name;
            var trackName = formContext.getAttribute('defra_businesstrackid').getValue()[0].name;

            //var serverUrl = Xrm.Page.context.getClientUrl();
            var xmlConfigPath = clientURL + "/WebResources/defra_formrederconfig";
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", xmlConfigPath, false);
            xmlHttp.send();
            var responseXML = xmlHttp.responseXML;
            var resFormLength = responseXML.getElementsByTagName('form').length;
            var respFormXML = responseXML.getElementsByTagName('form');


            //check the length of tabs
            //loop through Regimes
            var regimeLength = responseXML.getElementsByTagName('regime').length;
            var regimeXML = responseXML.getElementsByTagName('regime');
            var trackXML;
            var trackFound = false;
            for (var z = 0; z < resFormLength; z++) {
                if (respFormXML[z].id == formName) {
                    for (var j = 0; j < regimeLength; j++) {
                        if (regimeXML[j].id == regimeName) {
                            var regChildNodeLength = regimeXML[j].childNodes.length;
                            var regChildNodes = regimeXML[j].childNodes;
                            for (var k = 0; k < regChildNodeLength; k++) {
                                var foundRegimeNodeXML = regChildNodes[k].childNodes;
                                //loop through regime's childnodes to find tracks
                                for (var m = 0; m < foundRegimeNodeXML.length; m++) {
                                    if (foundRegimeNodeXML[m].id == trackName) {
                                        trackXML = foundRegimeNodeXML[m].childNodes;
                                        trackFound = true;
                                        break;
                                    }
                                    if (trackFound)
                                        break;
                                }
                                if (trackFound)
                                    break;
                            }
                        }
                        if (trackFound)
                            break;
                    }
                }
                if (trackFound)
                    break;
            }

            //Hide the tabs for the Regime and track
            var noOfTrackNodes = trackXML.length;
            for (var c = 0; c < noOfTrackNodes; c++) {
                if (trackXML[c].nodeName == "tabs") {
                    for (var b = 0; b < trackXML[c].childNodes.length; b++) {
                        if (trackXML[c].childNodes[b].nodeName == "tab") {
                            var tabtoHide = trackXML[c].childNodes[b].innerHTML;
                            formContext.ui.tabs.get(tabtoHide).setVisible(false);
                        }
                    }
                }
                else if (trackXML[c].nodeName == "sections") {
                    for (var b = 0; b < trackXML[c].childNodes.length; b++) {
                        if (trackXML[c].childNodes[b].nodeName == "section") {
                            var tabNameforSec = trackXML[c].childNodes[b].id;
                            var sectionToHide = trackXML[c].childNodes[b].innerHTML;
                            formContext.ui.tabs.get(tabNameforSec).sections.get(sectionToHide).setVisible(false);
                        }
                    }
                }
                else if (trackXML[c].nodeName == "attributes") {
                    for (var b = 0; b < trackXML[c].childNodes.length; b++) {
                        if (trackXML[c].childNodes[b].nodeName == "attribute") {
                            var attributetoHide = trackXML[c].childNodes[b].innerHTML;
                            formContext.getControl(attributetoHide).setVisible(false);
                        }
                    }
                }
            }
        }
    }
    catch (error) {
        alert("Error occurred in onloadAppForm method that renders the Application form: " + error.message);
    }
}

// Set tab focus on form load
function setTabFocus(executionContext) {
    debugger;
    try {
        var formContext = executionContext.getFormContext();
        if (formContext.getAttribute('defra_intel_checks_required').getValue() != null && formContext.getAttribute('defra_intel_checks_required').getValue())
            formContext.ui.tabs.get('tab_intelchecks').setVisible(true);
        else
            formContext.ui.tabs.get('tab_intelchecks').setVisible(false);
        if (formContext.ui.getFormType() == 2) {
            var status = formContext.getAttribute('statuscode').getValue();
            switch (status) {
                case 910400022:
                    formContext.ui.tabs.get('tab_applicationreceived').setFocus();
                    break;
                case 910400015:
                    formContext.ui.tabs.get('tab_intelchecks').setFocus();
                    break;
                case 910400021:
                case 910400001:
                    formContext.ui.tabs.get('tab_dulymaking').setFocus();
                    break;
                case 910400002:
                case 910400014:
                case 910400005:
                case 910400030:
                case 910400017:
                case 910400018:
                    formContext.ui.tabs.get('tab_determination').setFocus();
                    break;
                default:
                    formContext.ui.tabs.get('tab_general').setFocus();
            }
        }
    }
    catch (error) {
        alert('Error occurred in form load script method: setTabFocus().');
        //alert(error.messa);
    }
}

//Form onload script 
function onloadAppForm(executionContext) {
    debugger;
    try {
        var formContext = executionContext.getFormContext();
        var globalContext = Xrm.Utility.getGlobalContext();
        var clientURL = globalContext.getClientUrl();
        var formName = formContext.ui.formSelector.getCurrentItem().getLabel();
        if (formContext.getAttribute('defra_regimeid').getValue() != null && formContext.getAttribute('defra_businesstrackid').getValue() != null) {
            var regimeName = formContext.getAttribute('defra_regimeid').getValue()[0].name;
            var trackName = formContext.getAttribute('defra_businesstrackid').getValue()[0].name;

            //var serverUrl = Xrm.Page.context.getClientUrl();
            var xmlConfigPath = clientURL + "/WebResources/defra_formrederconfig";
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", xmlConfigPath, false);
            xmlHttp.send();
            var responseXML = xmlHttp.responseXML;
            var resFormLength = responseXML.getElementsByTagName('form').length;
            var respFormXML = responseXML.getElementsByTagName('form');


            //check the length of tabs
            //loop through Regimes
            var regimeLength = responseXML.getElementsByTagName('regime').length;
            var regimeXML = responseXML.getElementsByTagName('regime');
            var trackXML;
            var trackFound = false;
            for (var z = 0; z < resFormLength; z++) {
                if (respFormXML[z].id == formName) {
                    for (var j = 0; j < regimeLength; j++) {
                        if (regimeXML[j].id == regimeName) {
                            var regChildNodeLength = regimeXML[j].childNodes.length;
                            var regChildNodes = regimeXML[j].childNodes;
                            for (var k = 0; k < regChildNodeLength; k++) {
                                var foundRegimeNodeXML = regChildNodes[k].childNodes;
                                //loop through regime's childnodes to find tracks
                                for (var m = 0; m < foundRegimeNodeXML.length; m++) {
                                    if (foundRegimeNodeXML[m].id == trackName) {
                                        trackXML = foundRegimeNodeXML[m].childNodes;
                                        trackFound = true;
                                        break;
                                    }
                                    if (trackFound)
                                        break;
                                }
                                if (trackFound)
                                    break;
                            }
                        }
                        if (trackFound)
                            break;
                    }
                }
                if (trackFound)
                    break;
            }

            //Hide the tabs for the Regime and track
            if (trackFound) {
                var noOfTrackNodes = trackXML.length;
                for (var c = 0; c < noOfTrackNodes; c++) {
                    if (trackXML[c].nodeName == "tabs") {
                        for (var b = 0; b < trackXML[c].childNodes.length; b++) {
                            if (trackXML[c].childNodes[b].nodeName == "tab") {
                                var tabtoHide = trackXML[c].childNodes[b].innerHTML;
                                formContext.ui.tabs.get(tabtoHide).setVisible(false);
                            }
                        }
                    }
                    else if (trackXML[c].nodeName == "sections") {
                        for (var b = 0; b < trackXML[c].childNodes.length; b++) {
                            if (trackXML[c].childNodes[b].nodeName == "section") {
                                var tabNameforSec = trackXML[c].childNodes[b].id;
                                var sectionToHide = trackXML[c].childNodes[b].innerHTML;
                                formContext.ui.tabs.get(tabNameforSec).sections.get(sectionToHide).setVisible(false);
                            }
                        }
                    }
                    else if (trackXML[c].nodeName == "attributes") {
                        for (var b = 0; b < trackXML[c].childNodes.length; b++) {
                            if (trackXML[c].childNodes[b].nodeName == "attribute") {
                                var attributetoHide = trackXML[c].childNodes[b].innerHTML;
                                formContext.getControl(attributetoHide).setVisible(false);
                            }
                        }
                    }
                }
            }
            else
                alert("Track not present in the configuration.");
        }
    }
    catch (error) {
        alert("Error occurred in onloadAppForm method that renders the Application form: " + error.message);
    }
}